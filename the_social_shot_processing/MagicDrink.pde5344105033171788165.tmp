import processing.serial.*;
import processing.net.*;

// JSON
JSONArray jsonArray;

// CURRENT MIX
FluidMix current_mix;

// SERIAL PORT
Serial ArduinoPort;
int[] arr_serial = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 };

// SETUP -------------------------------------------------------------------------

void setup()
{
  // SET ENVIROMENT
  size(400, 450);
  fill(#000000, 100);
  noStroke();
  rect(10, 10, 380, 140, 7);
  
  // Description Start Button
  textSize(16);
  fill(#ffffff, 200);
  text("Shot via JSON Queue", 40, 60);
  
  // START BUTTON
  fill(#000000, 100);
  rect(270, 40, 80, 25, 7);
  textSize(16);
  fill(#ffffff, 200);
  text("Start", 290, 60);

  // SERIAL PORT
  println("Available Ports: ");
  println(Serial.list());
  // Open the port
  //ArduinoPort = new Serial(this, Serial.list()[0], 9600);
  println(SEPERATOR);
}

// DRAWING LOOP -------------------------------------------------------------------

void draw()
{ 
  changeCursor();
  
  // Get Execution Booleans and execute code
  if(execJson == true)
  {
    // DISPLAY STATE 1
    fill(#696969, 255);
    rect(10, 200, 380, 220, 7);
    textSize(20);
    fill(#ffffff, 200);
    text("Getting Data...", 40, 250);
    
    // Increment OUTPUT_FILENUMBER
    OUTPUT_FILENUMBER += 1;
    // Get Valve Data
    println("Getting JSON Array");
    
    
    // LOAD DATA FROM JSON URL
    jsonArray = loadJSONArray("http://test.joernroeder.de/fb-queue.json");
    // Get Size of JSON Array
    int jsonSize = jsonArray.size();
    
    
    // Get complete Input Object
    JSONObject inputObject = jsonArray.getJSONObject(0);
    // Get Sub Objects from Input Object
    JSONObject Predictions = inputObject.getJSONObject("predictions");
    JSONObject Meta = inputObject.getJSONObject("_meta");
    String ID = inputObject.getString("_id");
    
    // Get All Values from Predictions JSON Object
    float Extraversion = Predictions.getFloat("extraversion");
    float Agreeableness = Predictions.getFloat("agreeableness");
    float Conscientiousness = Predictions.getFloat("conscientiousness");
    float Openness = Predictions.getFloat("openness");
    float Neuroticism = Predictions.getFloat("neuroticism");
    
    // Construct Array from Values
    float[] InputValues = { Extraversion, Agreeableness, Conscientiousness, Openness, Neuroticism };
    
    FluidMix current_mix = new FluidMix(InputValues);
    
    println(SEPERATOR);
    
    // Print Current Mix
    println("Printing Current Mix to File...");
    println("Filenumber = " + OUTPUT_FILENUMBER);
    println(" ");
    current_mix.PrintMix();
    println(SEPERATOR);
    
    // Send Valve Data
    SendSerialValveData(current_mix);
    execJson = false;
  }
}

// MOUSE CURSOR AND BUTTONS --------------------------------------------------------------------
void changeCursor() 
{
  switch (mouseOverButton()) 
  {
  case 1:
    cursor(HAND);
    break;
  case 2:
    cursor(HAND);
    break;
  default:
    cursor(ARROW);
  }
}
int mouseOverButton() 
{
  if ((270 <= mouseX && mouseX <= 350) && (40 <= mouseY && mouseY <= 60)) 
  {
    return 1;
  }
  else if ((270 <= mouseX && mouseX <= 350) && (90 <= mouseY && mouseY <= 110))
  {
    return 2;
  }
  return 0;
}

void mouseClicked() 
{
  switch(mouseOverButton()) 
  {
  case 1:
    execJson = true;
    break;
  case 2:
    execRnd = true;
    break;
  }
}

// SERIAL EVENT --------------------------------------------------------------------

void serialEvent() 
{
  while (ArduinoPort.available() > 0) 
  {
    // get the new byte:
    char inChar = (char)ArduinoPort.read();
    // add it to the inputString:
    if(inChar != '\n')
    {
      valveString += inChar;
    }
    // if the incoming character is a newline, set a flag
    // so the main loop can do something about it:
    if (inChar == '\n')
    {
      serialEventComplete = true;
    }
  }
}

